---
import VisualizationWrapper from './VisualizationWrapper.astro';
import garesData from '../assets/gares_nettoyees_(1).json';
import poiData from '../assets/basilic_nouvelle_aquitaine_(1).json';
import { getDistance, getDeptCode, CODES_NA } from '../utils/geo';

// Filtrer les gares de Nouvelle-Aquitaine
const garesNA = garesData.filter((gare: any) => 
  CODES_NA.includes(getDeptCode(gare["Code commune"]))
);

// Filtrer les POI culturels (Mus√©es et Monuments)
const poiNA = poiData.filter((poi: any) => 
  poi.Sous_domaine === "Mus√©e" || poi.Sous_domaine === "Monument"
);

// Rayon par d√©faut (1 km)
const rayonKm = 1.0;

// Enrichir les gares avec le compte de POI √† proximit√©
const garesEnrichies = garesNA.map((gare: any) => {
  let compteur = 0;
  let nomsPOI: string[] = [];
  
  for (const poi of poiNA) {
    const distance = getDistance(
      gare.latitude, gare.longitude,
      poi.Latitude, poi.Longitude
    );
    
    if (distance <= rayonKm) {
      compteur++;
      nomsPOI.push(poi.Nom);
    }
  }
  
  return {
    ...gare,
    poi_proches: compteur,
    liste_poi: nomsPOI
  };
});

// Pr√©parer les donn√©es pour la carte (seulement les gares avec POI)
const garesAvecPOI = garesEnrichies.filter((g: any) => g.poi_proches > 0);

const mapId = `map-gares-enrichies`;
---

<VisualizationWrapper
  title="Gares culturelles de Nouvelle-Aquitaine"
  subtitle={`D√©couvrez les ${garesAvecPOI.length} gares qui donnent acc√®s √† des mus√©es et monuments en moins de ${rayonKm} km √† pied.`}
  id="carte-gares-enrichies"
>
  <div id={mapId} class="leaflet-map"></div>
  
  <div class="legend">
    <h4>L√©gende</h4>
    <p>üìç La taille des cercles indique le nombre de lieux culturels accessibles</p>
    <p>üé® Plus le cercle est grand, plus l'offre culturelle est riche</p>
  </div>
</VisualizationWrapper>

<style>
  .leaflet-map {
    width: 100%;
    height: 600px;
    border-radius: 8px;
    overflow: hidden;
    border: 1px solid var(--color-border);
  }
  
  .legend {
    margin-top: 1.5rem;
    padding: 1rem;
    background: var(--color-surface);
    border-radius: 8px;
    border-left: 4px solid var(--color-primary);
  }
  
  .legend h4 {
    font-size: 1rem;
    margin-bottom: 0.5rem;
    color: var(--color-text-primary);
  }
  
  .legend p {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    margin: 0.25rem 0;
  }
</style>

<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
  crossorigin=""
/>

<script
  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
  integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
  crossorigin=""
></script>

<script define:vars={{ garesAvecPOI }}>
  // Attendre que Leaflet et le DOM soient charg√©s
  window.addEventListener('load', () => {
    if (typeof L === 'undefined') {
      console.error('Leaflet not loaded');
      return;
    }
    
    const mapId = 'map-gares-enrichies';
    const mapElement = document.getElementById(mapId);
    if (!mapElement) return;
    
    // Initialiser la carte
    const map = L.map(mapId).setView([44.8, -0.5], 8);
    
    // Ajouter le fond de carte
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          maxZoom: 19
        }).addTo(map);
        
    // Ajouter les markers pour chaque gare avec POI
    garesAvecPOI.forEach((gare) => {
      // Calculer le rayon bas√© sur le nombre de POI
      const radius = Math.sqrt(gare.poi_proches) * 3;
      
      // Cr√©er un cercle
      const circle = L.circleMarker([gare.latitude, gare.longitude], {
            radius: radius,
            fillColor: '#dc143c',
            color: '#000',
            weight: 0.5,
            opacity: 0.2,
            fillOpacity: 0.7
          }).addTo(map);
          
          // Cr√©er le contenu du popup
          let popupContent = `<strong>${gare.Nom}</strong><br>`;
          popupContent += `<em>POI √† moins d'1km: ${gare.poi_proches}</em>`;
          
          if (gare.poi_proches > 0) {
            popupContent += '<hr style="margin: 8px 0;">';
            const listeAffichee = gare.liste_poi.slice(0, 5);
            popupContent += listeAffichee.join('<br>');
            
            if (gare.poi_proches > 5) {
              popupContent += `<br><em>...et ${gare.poi_proches - 5} autres.</em>`;
            }
          }
          
      circle.bindPopup(popupContent);
    });
    
    // Ajuster la vue pour montrer toutes les gares
    if (garesAvecPOI.length > 0) {
      const bounds = L.latLngBounds(
        garesAvecPOI.map(g => [g.latitude, g.longitude])
      );
      map.fitBounds(bounds, { padding: [50, 50], maxZoom: 10 });
    }
  });
</script>
